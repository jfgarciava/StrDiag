-- Semantica  "label"
isId:: String -> Bool
isId a = (take 4 a) == "\\Id{"

isid:: String -> Bool
isid a = (take 4 a) == "\\id{"

l2Comp:: String -> String -> String
l2Comp a b   
       | isId a = b
       | isId b = a
       | otherwise = b ++ " \\comp " ++ a 

h2Comp:: String -> String -> String
h2Comp a b 
       | isid a = b
       | isid b = a
       | otherwise = b ++ " \\star " ++ a 

preComp:: String -> String -> String
preComp n f 
       | isid n = n
       | isId f = n
       | otherwise = concat [n, "_{", f, "}"] 

posComp:: String -> String -> String
posComp f n 
       | isId f = n
       | isid n = n
       | otherwise = f ++ " \\at " ++ n


---instance Sem2 String where
--- lComp "label" [(l,_,_)] = l 
--- lComp "label" ls = foldl1 l2Comp  $ [ l |(l,_,_)<-ls]

--- lComp _ ls = concat [ l |(l,_,_)<-ls]

 hComp "label" [(l,_,_)] = l 
 hComp "label" ls = let s1 = init $ map (foldl1 l2Comp) $ inits  [ s |(_,s,_)<-ls]       ---init $ scanl1 (l2Comp)     
                        t1 = tail $ map (foldl1 l2Comp) $ tails  [ t |(_,_,t)<-ls]      --- init $ reverse $ scanl1 (l2Comp) 
                        l1 = [ l |(l,_,_)<-ls]
                        q  = zipWith preComp l1 t1
                     in foldl1 (h2Comp) $ zipWith posComp s1 q

 hComp _ ls = concat [ l |(l,_,_)<-ls]

 vComp "label" ls = foldl1 h2Comp ls
 vComp _ ls = concat ls


-- Semantica de diagramas de funtores tikzcd

--getGR2 NO atr = Gr2 [Node (0,0) atr] [] [] (0,0)
--getGR2 ED atr = Gr2 [] [Edge (0,0) (0,0) (0,0) atr] [] (0,0)
--getGR2 DE atr = Gr2 [] [] [DEdge (0,0) (0,0) atr] (0,0)


--gr2Semantic = Sem2 

h_edgeAppend :: Coord -> (Gr2, Gr2, Gr2) -> (Gr2, Gr2, Gr2) -> Gr2
h_edgeAppend (x,y) (grAtr, grS, grT) (grAtr2, grS2 , grT2) = let gr2 = h_edgeComp (x,y) (grAtr2, grS2 , grT2)
                                                                 gr2t = translate (\(a,b)-> (a+2,b)) gr2
                                                             in h_edgeComp (x,y) (grAtr, grS, gr2t)


bendHEdge :: (Coord -> Coord) -> Coord -> Gr2 -> Gr2
bendHEdge fun pos (Gr2 ns hs vs bx atr) = (Gr2 newNs newHs vs newBx atr) where
                                                                        (hs1, hs2) = break  (\h -> (center h == pos)) hs
                                                                        newHs = (map (\(HEdge s t c atr) -> (HEdge s t (fun c) atr) ) hs1 ) ++ hs2
                                                                        (ns1, ns2) = break  (\n -> (at n == pos)) ns
                                                                        newNs = (map (\(Node pos atr) -> (Node (fun pos) atr) ) ns1 ) ++ ns2
                                                                        newBx = reSizeToFit (fun pos) bx 


--(sn == "@TerminalCat@")
--isIdLabel (Label n _ _) = (take 3 n == "id@")
-- n = intercalate "%>" $ [asKey a | (a,_,_) <-ls]
-- n = intercalate "%$" $ [asKey a | (a,_,_) <-ls]